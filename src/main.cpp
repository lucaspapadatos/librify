#include <QApplication>
#include <QQmlApplicationEngine>
#include <QQmlContext>
#include "SpotifyManager.h"
#include "AuthServer.h"
#include "LocalMusicManager.h"
#include "TrackListModel.h"
#include "PlaybackManager.h"
#include "PlaylistManager.h"
#include <QUrl>
#include <QDebug>
#include <QFile>
#include <QObject>
#include <QTimer>
#include <QQmlError>
#include <QDirIterator>
#include <QIcon>
#include <QQuickStyle>
#include <QFontDatabase>

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

	QCoreApplication::setOrganizationName("Librify");
    QCoreApplication::setApplicationName("Librify");
	
    QString base = QStandardPaths::writableLocation(QStandardPaths::AppDataLocation) + "/playlists";
	qDebug() << base;

    app.setWindowIcon(QIcon(":/icons/batRubyRed2.png"));

    QQuickStyle::setStyle("Basic");

    AuthServer authServer;
    SpotifyManager spotifyManager;
    LocalMusicManager localMusicManager;
    TrackListModel trackListModel;
    PlaybackManager playbackManager;
	PlaylistManager playlistManager;

	// Ensures enum can be used in Main.qml and TrackListPane.qml
	qmlRegisterUncreatableType<TrackListModel>(
    "com.librify", 1, 0, "TrackListModel",
    "Enums are only used for accessing constants");

    // --- Connect Signals/Slots ---
    qDebug() << "[main] requestAccessToken => authorizationCodeReceived: Connected";
    QObject::connect(&authServer, &AuthServer::authorizationCodeReceived,
                     &spotifyManager, &SpotifyManager::requestAccessToken);
    qDebug() << "[main] tracksReadyForDisplay => updateTracks: Connected";
    QObject::connect(&localMusicManager, &LocalMusicManager::tracksReadyForDisplay,
                     &trackListModel, &TrackListModel::updateTracks);
	qDebug() << "[main] tracksReadyForDisplay => updateTracks: Connected";
    QObject::connect(&playlistManager, &PlaylistManager::tracksReadyForDisplay,
                     &trackListModel, &TrackListModel::updateTracks);

    qDebug() << "[main] trackUpdated => updateTracks: Connected";
    QObject::connect(&localMusicManager, &LocalMusicManager::trackUpdated,
                     &trackListModel, &TrackListModel::updateTrack);
    // ---------------------------

    QQmlApplicationEngine engine;

    // *** IMPORTANT: ADD NEW LINE FOR EVERY SOURCE FILE ***
    engine.rootContext()->setContextProperty("cppSpotifyManager", &spotifyManager);
    engine.rootContext()->setContextProperty("cppLocalManager", &localMusicManager);
    engine.rootContext()->setContextProperty("cppTrackModel", &trackListModel);
    engine.rootContext()->setContextProperty("cppPlaybackManager", &playbackManager);
	engine.rootContext()->setContextProperty("cppPlaylistManager", &playlistManager);

    // --- Load QML ---
    const QUrl url(QStringLiteral("qrc:/Main.qml"));
    qDebug() << "[main] Loading QML:" << url.toString();
    if (!QFile::exists(":/Main.qml")) {
        qWarning() << "[main] FATAL: QML resource file does not exist at the specified path!";
        return -1;
    }

    // --- Load fonts ---
    int fontId = QFontDatabase::addApplicationFont(":/fonts/yeezy_tstar-bold-webfont.ttf");
    QStringList fontFamilies = QFontDatabase::applicationFontFamilies(fontId);
    if (!fontFamilies.isEmpty()) {
        QFont defaultFont(fontFamilies.first());
        app.setFont(defaultFont);
    } else { // Set a fallback system font if custom font loading fails
		qDebug() << "[main] error: Failed to load font family: " << fontFamilies;
        QFont defaultFont("Segoe UI");
        app.setFont(defaultFont);
    }

    // *** HANDLERS ***
    QObject::connect(&engine, &QQmlApplicationEngine::objectCreated,
                     &app, [url](QObject *obj, const QUrl &objUrl) {
                         // This lambda checks if the root QML object was created successfully
                         if (!obj && url == objUrl) {
                             qWarning() << "[main] FATAL: Failed to create root QML object from" << url.toString();
                             QCoreApplication::exit(-1); // Exit if root component fails to load
                         } else if (obj) {
                             qDebug() << "[main] Main.qml created successfully.\n";
                         }
                     }, Qt::QueuedConnection);
    QObject::connect(&engine, &QQmlApplicationEngine::warnings,
                     [](const QList<QQmlError> &warnings) {
                         // This lambda prints any warnings or errors generated by the QML engine
                         if (warnings.isEmpty()) return;
                         qWarning() << "[main] QML Engine Warnings/Errors:";
                         for (const QQmlError &error : warnings) {
                             qWarning() << "  -" << error.toString(); // Print each QML error/warning
                         }
                     });
    // ***********************
    // -------------------------------------------------------
	engine.load(url);
    if (engine.rootObjects().isEmpty() && !url.isEmpty()) {
        qWarning() << "[main] FATAL: engine.rootObjects() is empty after load() and URL was specified. QML failed to load correctly.";
        return -1;
    }

    // --- Auto-Authenticate ---
    // qDebug() << "[main] Starting auth server...";
    // authServer.start();
    // qDebug() << "[main] Scheduling auto-authentication...";
    // QTimer::singleShot(500, &spotifyManager, &SpotifyManager::authenticate);

    return app.exec();
}
